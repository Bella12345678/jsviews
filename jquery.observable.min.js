/*
 * jQuery Observable Plugin v1.0pre
 * Observable changes on arrays and objects
 * http://github.com/BorisMoore/jsviews
 */
(function(a){a.observable=function(b){return a.isArray(b)?new ObservableArray(b):new ObservableObject(b)};a.observer=function(c){var b=a.observable(c);b.changes=[],b.observe=function(){this.changes.length&&a([this._data]).triggerHandler("arrayChange",this.changes);this.changes=[]}};var b=a.observable.extend=jQuery.extend;ObservableArray=function(a){this._data=a;return this};a.observable.array=ObservableArray.prototype={constructor:a.observable,data:function(){return this._data},extend:b};ObservableObject=function(a){this._data=a;return this};a.observable.object=ObservableObject.prototype={constructor:a.observable,data:function(){return this._data},extend:b}})(jQuery);(function(a){var b={pop:function(){var a=this.length;if(a)return{change:"remove",oldIndex:a-1,oldItems:[this[a-1]]}},push:function(){return{change:"add",newIndex:this.length,newItems:[arguments[0]]}},reverse:function(){if(this.length)return{change:"reset"}},shift:function(){if(this.length)return{change:"remove",oldIndex:0,oldItems:[this[0]]}},sort:function(){if(this.length)return{change:"reset"}},splice:function(){var e=a.makeArray(arguments),b=e[0],f=e[1],d,c=e.slice(2);if(f<=0){if(c.length)return{change:"add",newIndex:b,newItems:c}}else{d=this.slice(b,b+f);return c.length?{change:"move",oldIndex:b,oldItems:d,newIndex:b,newItems:c}:{change:"remove",oldIndex:b,oldItems:d}}},unshift:function(){return{change:"add",newIndex:0,newItems:[arguments[0]]}},move:function(){var a,b=arguments[1];if(b>0){a=arguments[0];return{change:"move",oldIndex:a,oldItems:this.splice(a,b),newIndex:arguments[2]}}}};function c(c,b,d){if(b){switch(b.change){case"add":[].splice.apply(c,[].concat(b.newIndex,0,b.newItems));break;case"remove":c.splice(b.oldIndex,b.oldItems.length);break;case"move":c.splice(b.oldIndex,b.oldItems.length);[].splice.apply(c,[].concat(b.newIndex,0,b.newItems))}if(d)d.push(b);else a([c]).triggerHandler("arrayChange",b)}}a.each(["pop","push","reverse","shift","sort","splice","move"],function(e,d){a.observable.array[d]=function(){var a=this._data;c(a,b[d].apply(a,arguments),this.changes);return this}});a.observable.array.extend({replace:function(a){this.splice.apply(this,[].concat(0,this._data.length,a));return this}})})(jQuery);(function(a){a.observable.object.extend({setField:function(d,e){var c=this._data;if(d){var f=[{path:d,value:e}],g=b(c,d);c=g[0],d=g[1];if(c&&c[d]!==e){c[d]=e;if(this.changes)this.changes.push(f);else a(c).triggerHandler("objectChange",f)}}}});function b(a,b){if(a&&b){var c=b.split(".");b=c.pop();while(a&&c.length)a=a[c.shift()];return[a,b]}return[]}})(jQuery);